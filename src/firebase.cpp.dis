#include "firebase.h"
#include "secrets.h"
#include "version.h"

FirebaseData fbdo;
FirebaseData fbdoStream;
FirebaseAuth auth;
FirebaseConfig config;
bool firebaseInitialized = false;
bool streamConnected = false;
String deviceId;

void streamCallback(FirebaseStream data) {
    Serial.print("[STREAM] Nieuwe waarde: ");
    Serial.println(data.stringData());
}

void streamTimeoutCallback(bool timeout) {
    if (timeout) {
        Serial.println("[STREAM] Timeout, probeer opnieuw...");
        Firebase.RTDB.endStream(&fbdoStream);
        delay(1000);
        streamConnected = false;
    }
}

void updateFirebaseInstant(String path, String data) {
    String destination = "devices/" + deviceId + path;
    if (Firebase.RTDB.setString(&fbdo, destination, data)) {
        Serial.print("volgende path is geupdated: ");
        Serial.print(destination);
        Serial.print(" -> ");
        Serial.println(data);
    }
}

void initFirebase() {
    config.api_key = API_KEY;
    config.database_url = DATABASE_URL;
    auth.user.email = USER_EMAIL;
    auth.user.password = USER_PASSWORD;
    Firebase.begin(&config, &auth);
    Firebase.reconnectWiFi(true);
    safePrintln("Firebase opnieuw ge√Ønitialiseerd (anoniem)");
    firebaseInitialized = false;
    streamConnected = false;
}

void handleFirebaseTasks() {
    if (WiFi.status() == WL_CONNECTED && Firebase.ready() && firebaseInitialized && !streamConnected) {
        if (Firebase.RTDB.beginStream(&fbdoStream, "/firmware/latest_version")) {
            Firebase.RTDB.setStreamCallback(&fbdoStream, streamCallback, streamTimeoutCallback);
            Serial.println("Stream gestart!");
            streamConnected = true;
        } else {
            Serial.print("Stream start mislukt: ");
            Serial.println(fbdoStream.errorReason());
        }
    }
}
